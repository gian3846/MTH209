return(logL)
}
points <- 1e3
x <- (0:10000)/points
y <- x
for(i in 1:points)
{
y[i] <- logLfunc(N, x[i])
}
plot(x, y, type = "l")
set.seed(1)
nu <- 5
N <- 10
samp <- rcauchy(N, nu)
logLfunc <- function(N, nuk)
{
temp <- 0
for(j in 1:N)
{
temp = temp + log(1 + ((samp[j] - nuk)^2))
}
logL <- -N * log(pi) - temp
return(logL)
}
points <- 1e3
x <- (0:10000)/points
y <- x
for(i in 1:points)
{
y[i] <- logLfunc(N, x[i])
}
plot(x, y, type = "l")
set.seed(1)
nu <- 5
N <- 10
samp <- rcauchy(N, nu)
logLfunc <- function(N, nuk)
{
temp <- 0
for(j in 1:N)
{
temp = temp + log(1 + ((samp[j] - nuk)^2))
}
logL <- -N * log(pi) - temp
return(logL)
}
points <- 1e3
x <- (0:10000)/points
y <- x
for(i in 1:points)
{
y[i] <- logLfunc(N, x[i])
}
plot(x, y, type = "l")
set.seed(1)
nu <- 5
N <- 10
samp <- rcauchy(N, nu)
logLfunc <- function(N, nuk)
{
temp <- 0
for(j in 1:N)
{
temp = temp + log(1 + ((samp[j] - nuk)^2))
}
logL <- -N * log(pi) - temp
return(logL)
}
points <- 1e3
x <- (0:10000)/points
y <- x
for(i in 1:points)
{
y[i] <- logLfunc(N, x[i])
}
plot(x, y, type = "l")
set.seed(1)
nu <- 5
N <- 10
samp <- rcauchy(N, nu)
logLfunc <- function(N, nuk)
{
temp <- 0
for(j in 1:N)
{
temp = temp + log(1 + ((samp[j] - nuk)^2))
}
logL <- -N * log(pi) - temp
return(logL)
}
points <- 1e3
x <- (0:10000)/points
y <- x
for(i in 1:points)
{
y[i] <- logLfunc(N, x[i])
}
plot(x, y, type = "l")
set.seed(1)
nu <- 5
N <- 10
samp <- rcauchy(N, nu)
logLfunc <- function(N, nuk)
{
temp <- 0
for(j in 1:N)
{
temp = temp + log(1 + ((samp[j] - nuk)^2))
}
logL <- -N * log(pi) - temp
return(logL)
}
points <- 1e3
x <- (0:10000)/points
y <- x
for(i in 1:points)
{
y[i] <- logLfunc(N, x[i])
}
plot(x, y, type = "l")
set.seed(1)
nu <- 5
N <- 10
samp <- rcauchy(N, nu)
logLfunc <- function(N, nuk)
{
temp <- 0
for(j in 1:N)
{
temp = temp + log(1 + ((samp[j] - nuk)^2))
}
logL <- -N * log(pi) - temp
return(logL)
}
points <- 1e3
x <- (0:10000)/points
y <- x
for(i in 1:points)
{
y[i] <- logLfunc(N, x[i])
}
plot(x, y, type = "l")
set.seed(1)
nu <- 5
N <- 10
samp <- rcauchy(N, nu)
logLfunc <- function(N, nuk)
{
temp <- 0
for(j in 1:N)
{
temp = temp + log(1 + ((samp[j] - nuk)^2))
}
logL <- -N * log(pi) - temp
return(logL)
}
points <- 1e3
x <- (0:10000)/points
y <- x
for(i in 1:points)
{
y[i] <- logLfunc(N, x[i])
}
plot(x, y, type = "l")
set.seed(1)
nu <- 5
N <- 10
samp <- rcauchy(N, nu)
logLfunc <- function(N, nuk)
{
temp <- 0
for(j in 1:N)
{
temp = temp + log(1 + ((samp[j] - nuk)^2))
}
logL <- -N * log(pi) - temp
return(logL)
}
points <- 1e3
x <- (0:10000)/points
y <- x
for(i in 1:points)
{
y[i] <- logLfunc(N, x[i])
}
plot(x, y, type = "l")
?optim
data <- rnorm(100, 2, 3)
data <- rnorm(100, 2, 3)
norm.ll <- function(theta, y)
{
mu <- theta[1]
sigmaSq <- theta[2]
n <- length(y)
ll <- -n/2*log(2*pi) -n/2*log(sigma2) - (2*sigma2)^(-1)*sum((y-mu)^2)
return(-logl)
}
ans <- optim(c(0, 1), norm.ll, y = data, method = "BFGS")
data <- rnorm(100, 2, 3)
norm.ll <- function(theta, y)
{
mu <- theta[1]
sigma2 <- theta[2]
n <- length(y)
ll <- -n/2*log(2*pi) -n/2*log(sigma2) - (2*sigma2)^(-1)*sum((y-mu)^2)
return(-logl)
}
ans <- optim(c(0, 1), norm.ll, y = data, method = "BFGS")
data <- rnorm(100, 2, 3)
norm.ll <- function(theta, y)
{
mu <- theta[1]
sigma2 <- theta[2]
n <- length(y)
ll <- -n/2*log(2*pi) -n/2*log(sigma2) - (2*sigma2)^(-1)*sum((y-mu)^2)
return(-ll)
}
ans <- optim(c(0, 1), norm.ll, y = data, method = "BFGS")
data <- rnorm(100, 2, 3)
norm.ll <- function(theta, y)
{
mu <- theta[1]
sigma2 <- theta[2]
n <- length(y)
ll <- -n/2*log(2*pi) -n/2*log(sigma2) - (2*sigma2)^(-1)*sum((y-mu)^2)
return(-ll)
}
ans <- optim(c(0, 2), norm.ll, y = data, method = "BFGS")
data <- rnorm(100, 2, 3)
norm.ll <- function(theta, y)
{
mu <- theta[1]
sigma2 <- theta[2]
n <- length(y)
ll <- -n/2*log(2*pi) -n/2*log(sigma2) - (2*sigma2)^(-1)*sum((y-mu)^2)
return(-ll)
}
ans <- optim(c(0, 2), norm.ll, y = data, method = "BFGS")
data <- rnorm(100, 2, 2)
norm.ll <- function(theta, y)
{
mu <- theta[1]
sigma2 <- theta[2]
n <- length(y)
ll <- -n/2*log(2*pi) -n/2*log(sigma2) - (2*sigma2)^(-1)*sum((y-mu)^2)
return(-ll)
}
ans <- optim(c(0, 2), norm.ll, y = data, method = "BFGS")
data <- rnorm(100, 2, 5)
norm.ll <- function(theta, y)
{
mu <- theta[1]
sigma2 <- theta[2]
n <- length(y)
ll <- -n/2*log(2*pi) -n/2*log(sigma2) - (2*sigma2)^(-1)*sum((y-mu)^2)
return(-ll)
}
ans <- optim(c(0, 2), norm.ll, y = data, method = "BFGS")
data <- rnorm(100, 2, 5)
norm.ll <- function(theta, y)
{
mu <- theta[1]
sigma2 <- theta[2]
n <- length(y)
ll <- -n/2*log(2*pi) -n/2*log(sigma2) - (2*sigma2)^(-1)*sum((y-mu)^2)
return(-ll)
}
ans <- optim(c(0, 2), norm.ll, y = data, method = "BFGS")
data <- rnorm(100, 2, 5)
norm.ll <- function(theta, y)
{
mu <- theta[1]
sigma2 <- theta[2]
n <- length(y)
ll <- -n/2*log(2*pi) -n/2*log(sigma2) - (2*sigma2)^(-1)*sum((y-mu)^2)
return(-ll)
}
ans <- optim(c(0, 2), norm.ll, y = data, method = "BFGS")
data <- rnorm(100, 2, 5)
norm.ll <- function(theta, y)
{
mu <- theta[1]
sigma2 <- theta[2]
n <- length(y)
ll <- -n/2*log(2*pi) -n/2*log(sigma2) - (2*sigma2)^(-1)*sum((y-mu)^2)
return(-ll)
}
ans <- optim(c(0, 2), norm.ll, y = data, method = "BFGS")
data <- rnorm(100, 2, 5)
norm.ll <- function(theta, y)
{
mu <- theta[1]
sigma2 <- theta[2]
n <- length(y)
ll <- -n/2*log(2*pi) -n/2*log(sigma2) - (2*sigma2)^(-1)*sum((y-mu)^2)
return(-ll)
}
ans <- optim(c(0, 2), norm.ll, y = data, method = "BFGS")
data <- rnorm(100, 2, 5)
norm.ll <- function(theta, y)
{
mu <- theta[1]
sigma2 <- theta[2]
n <- length(y)
ll <- -n/2*log(2*pi) -n/2*log(sigma2) - (2*sigma2)^(-1)*sum((y-mu)^2)
return(-ll)
}
ans <- optim(c(0, 2), norm.ll, y = data, method = "BFGS")
data <- rnorm(100, 2, 5)
norm.ll <- function(theta, y)
{
mu <- theta[1]
sigma2 <- theta[2]
n <- length(y)
ll <- -n/2*log(2*pi) -n/2*log(sigma2) - (2*sigma2)^(-1)*sum((y-mu)^2)
return(-ll)
}
ans <- optim(c(0, 2), norm.ll, y = data, method = "BFGS")
data <- rnorm(100, 2, 5)
norm.ll <- function(theta, y)
{
mu <- theta[1]
sigma2 <- theta[2]
n <- length(y)
ll <- -n/2*log(2*pi) -n/2*log(sigma2) - (2*sigma2)^(-1)*sum((y-mu)^2)
return(-ll)
}
ans <- optim(c(0, 2), norm.ll, y = data, method = "BFGS")
data <- rnorm(100, 2, 5)
norm.ll <- function(theta, y)
{
mu <- theta[1]
sigma2 <- theta[2]
n <- length(y)
ll <- -n/2*log(2*pi) -n/2*log(sigma2) - (2*sigma2)^(-1)*sum((y-mu)^2)
return(-ll)
}
ans <- optim(c(0, 2), norm.ll, y = data, method = "BFGS")
data <- rnorm(100)
n <- 100
n <- 100
meanS <- numeric(length = 1e5)
medianS <- numeric(length = 1e5)
library(boot)
?boot
Books <- read.table("http://stat4ds.rwth-aachen.de/data/Library.dat", header = TRUE)
results <- boot(Books$P, median, R = 1e4)
results <- boot(Books$P,statistic =  median, R = 1e4)
results <- boot(Books$P,function(x, b){median(x)}, R = 1e4)
results <- boot(Books$P,function(x){median(x)}, R = 1e4)
results <- boot(Books$P,function(x, b){median(x[b])}, R = 1e4)
plot(results)
ci <- boot.ci(results, conf = 0.95)
ci
corrBoot <- boot(c(Books), function(x, b){corr(x[b, 1], x[b, 2])})
corrBoot <- boot(c(Books), function(x, b){corr(x[b, 1], x[b, 2])}, R = 1e4)
corrBoot <- boot(Books, function(x, b){corr(x[b, 1], x[b, 2])}, R = 1e4)
corrBoot <- boot(cbind(Books$C, Books$P), function(x, b){corr(x[b, 1], x[b, 2])}, R = 1e4)
corrBoot <- boot(cbind(Books$C, Books$P), function(x,b){cor(x[b,1],x[b,2])}, R = 1e4)
corBoot <- boot(cbind(Books$C, Books$P), function(x,b){cor(x[b,1],x[b,2])}, R = 1e4)
ci <- boot.ci(corBoot)
ci <- boot.ci(corBoot, conf = 0.90)
hist(corBoot$t)
hist(corBoot$t, breaks = "Scott")
UN <- read.table("http://stat4ds.rwth-aachen.de/data/UN.dat", header=T)
UN <- read.table("http://stat4ds.rwth-aachen.de/data/UN.dat", header=T)
yMean <- function(y, b)
{
return(mean(y[b]))
}
yMedian <- function(y, b)
{
return(median(y[b]))
}
yVar <- function(y, b)
{
return(var(y[b]))
}
yCor <- function(y, b)
{
return(cor(y[b, 1], y[b, 2], method = "pearson"))
}
View(UN)
bCor <- boot(cbind(UN$Homicide, UN$Internet), yCor, R = 1e4)
bCor
plot(bCor)
boot.ci(bCOr)
boot.ci(bCor)
plot(UN$Homicide, UN$Internet)
bCor <- boot(cbind(UN$HDI, UN$Prison), yCor, R = 1e4)
plot(bCor)
boot.ci(bCor)
plot(UN$HDI, UN$Internet)
plot(UN$HDI, UN$Prison)
bCor$t0
alpha <- 0.05
y = c(5, 2, 3, 1, 4, 2)
m = 10
n = length(y)
thetahat = mean(y)/m
nboot = 1000
rbinom(5, 1)
rbinom(5, 1, 0.5)
rbinom(5, 2, 0.5)
rbinom(5, 2, 0.5)
rbinom(5, 2, 0.5)
rbinom(5, 2, 0.5)
rbinom(5, 2, 0.5)
rbinom(5, 2, 0.5)
tmpdata = rbinom(n*nboot, m, thetahat)
colMeans(bootstrapsample)
bootstrapsample = matrix(tmpdata, nrow=n, ncol=nboot)
View(bootstrapsample)
View(bootstrapsample)
thetahat.b = colMeans(bootstrapsample)/m
q.CI = quantile(thetahat.b, c(alpha/2,1-alpha/2)); q.CI
yMean <- function(y, b)
{
return(mean(y[b]))
}
yMean <- function(y, b)
{
return(mean(y[b]))
}
gammaR <- function(y, mle)
{
samp <- rgamma(length(y), shape = mle[1], rate = mle[2])
return(samp)
}
y <- c(5.88,5.55,5.40,1.83,2.31,1.32,1.52,6.79,4.99,3.87,1.21,10.44,3.71,1.68,2.53,5.40,0.17,9.00,1.41,3.37,2.99,1.68,1.73,6.43,4.16)
s <- 2; r <- 0.5
mle <- c(s,r)
bootResults <- boot(y, yMean, R = 1e4, sim = "parametric", ran.gen = gammaR, mle = mle)
mean(y)
boot.ci(bootResults)
bootResults
plot(bootResults)
quantile(bootResults, c(0.025, 0.975))
bootstrap.quantile(bootResults)
bootCI <- mean(y) +c(-1.96*0.567, 1.96*0.567)
yMean <- function(y, b)
{
return(mean(y[b]))
}
gammaR <- function(y, mle)
{
samp <- rgamma(length(y), shape = mle[1], rate = mle[2])
return(samp)
}
y <- c(5.88,5.55,5.40,1.83,2.31,1.32,1.52,6.79,4.99,3.87,1.21,10.44,3.71,1.68,2.53,5.40,0.17,9.00,1.41,3.37,2.99,1.68,1.73,6.43,4.16)
y <- numeric(length = y)
y <- numeric(length = length(y))
s <- 2; r <- 0.5
mle <- c(s,r)
bootResults <- boot(y, yMean, R = 1e4, sim = "parametric", ran.gen = gammaR, mle = mle)
bootCI <- mean(y) +c(-1.96*0.567, 1.96*0.567)
bootResults
plot(bootResults)
samp <- rcauchy(1e2)
samp <- rcauchy(1e2)
yMean <- function(y, b, trim)
{
return(mean(y[b], trim))
}
yMedian <- function(y, b)
{
return(median(y[b]))
}
bootResults <- boot(samp, yMean, trim = 0, R = 1e4)
bootCI <- boot.ci(bootResults)
bootResults <- boot(samp, yMean, trim = 0.05, R = 1e4)
bootCI <- boot.ci(bootResults)
samp <- rcauchy(1e2)
yMean <- function(y, b, trim)
{
return(mean(y[b], trim))
}
yMedian <- function(y, b)
{
return(median(y[b]))
}
bootResults <- boot(samp, yMean, trim = 0, R = 1e4)
bootCI <- boot.ci(bootResults)
bootCI
bootResults <- boot(samp, yMean, trim = 0.05, R = 1e4)
bootCI <- boot.ci(bootResults)
bootCI
bootResults <- boot(samp, yMedian, trim = 0, R = 1e4)
bootCI <- boot.ci(bootResults)
bootCI
bootResults <- boot(samp, yMean, trim = 0, R = 1e4)
bootCI <- boot.ci(bootResults)
bootCI
bootResults <- boot(samp, yMean, trim = 0.05, R = 1e4)
bootCI <- boot.ci(bootResults)
bootCI
bootResults <- boot(samp, yMedian, trim = 0, R = 1e4)
bootCI <- boot.ci(bootResults)
bootCI
bootResults <- boot(samp, yMean, trim = 0, R = 1e4)
bootCI <- boot.ci(bootResults)
bootCI
bootResults <- boot(samp, yMean, trim = 0.05, R = 1e4)
bootCI <- boot.ci(bootResults)
bootCI
bootResults <- boot(samp, yMedian, trim = 0, R = 1e4)
bootCI <- boot.ci(bootResults)
bootCI
bootResults <- boot(samp, yMedian, R = 1e4)
bootCI <- boot.ci(bootResults)
bootCI
setwd("D:/College/Subjects/Sem 4/MTH-209/Practice")
