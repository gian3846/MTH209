for(i in 1:length(n))
{
score <- numeric(length = n[i])
for(j in 1:length(n[i]))
{
samp <- rnorm(1, mu0, 1)
if(samp <= conf[2] && samp >= conf[1])
score[j] <- score[j] + 1
}
p[i] <- mean(score)
sdP[i] <- sd(score)
}
print(p)
print(sd)
#2
set.seed(1)
mu0 <- 10
N <- 1e2
y <- rnorm(N, mu0, 1)
test <- t.test(y, mu = mu0)
conf <- test$conf.int
n <- c(10, 100, 1000, 10000, 100000)
p <- numeric(length = length(n))
sdP <- numeric(length = length(n))
i <- 3
score <- numeric(length = n[i])
for(j in 1:length(n[i]))
{
samp <- rnorm(1, mu0, 1)
if(samp <= conf[2] && samp >= conf[1])
score[j] <- score[j] + 1
}
score <- numeric(length = n[i])
for(j in 1:length(n[i]))
{
samp <- rnorm(1, mu0, 1)
if((samp <= conf[2]) && (samp >= conf[1]))
score[j] <- score[j] + 1
}
score
p[i] <- mean(score)
set.seed(1)
#1
beta <- 5
n <- c(10, 50, 100, 500, 1000, 5000)
y <- list()
mleBeta <- function(y, n)
{
sqrt(sum(y^2)/n)
}
negLogLike <- function(y, n, beta)
{
logLikeli <- n*log(2) - 2*n*log(beta) + sum(log(y)) - sum(y^2)/(beta^2)
return(-logLikeli)
}
mle_cal <- numeric(length = length(n))
mle_opt <- numeric(length = length(n))
for(i in 1:length(n))
{
y[[i]] <- rweibull(n[i], shape = 2, scale = beta)
mle_cal[i] <- mleBeta(y[[i]], n[i])
mle_opt[i] <- optim(beta, negLogLike, y = y[[i]], n = n[i], method = "BFGS")$par
}
print(mle_cal)
print(mle_opt)
#2
set.seed(1)
mu0 <- 10
N <- 1e2
n <- c(10, 100, 1000, 10000, 100000)
p <- numeric(length = length(n))
sdP <- numeric(length = length(n))
for(i in 1:length(n))
{
score <- numeric(length = n[i])
for(j in 1:length(n[i]))
{
y <- rnorm(N, mu0, 1)
test <- t.test(y, mu = mu0)
conf <- test$conf.int
if((mu0 <= conf[2]) && (mu0 >= conf[1]))
score[j] <- score[j] + 1
}
p[i] <- mean(score)
sdP[i] <- sd(score)
}
print(p)
print(sd)
#2
set.seed(1)
mu0 <- 10
N <- 1e2
n <- c(10, 100, 1000, 10000, 100000)
p <- numeric(length = length(n))
sdP <- numeric(length = length(n))
i <- 1
j <- 1
y <- rnorm(N, mu0, 1)
test <- t.test(y, mu = mu0)
conf <- test$conf.int
score <- numeric(length = n[i])
if((mu0 <= conf[2]) && (mu0 >= conf[1]))
score[j] <- score[j] + 1
j <- 2
y <- rnorm(N, mu0, 1)
test <- t.test(y, mu = mu0)
conf <- test$conf.int
mu0 <= conf[2]
mu0 >= conf[1]
(mu0 <= conf[2]) && (mu0 >= conf[1])
if((mu0 <= conf[2]) && (mu0 >= conf[1]))
score[j] <- score[j] + 1
j <- 3
y <- rnorm(N, mu0, 1)
test <- t.test(y, mu = mu0)
conf <- test$conf.int
if((mu0 <= conf[2]) && (mu0 >= conf[1]))
score[j] <- score[j] + 1
mu0 <- 10
N <- 1e2
n <- c(10, 100, 1000, 10000, 100000)
p <- numeric(length = length(n))
sdP <- numeric(length = length(n))
i ,-1
i ,-1
i <-1
score <- numeric(length = n[i])
for(j in 1:length(n[i]))
{
y <- rnorm(N, mu0, 1)
test <- t.test(y, mu = mu0)
conf <- test$conf.int
if((mu0 <= conf[2]) && (mu0 >= conf[1]))
score[j] <- score[j] + 1
}
set.seed(1)
mu0 <- 10
N <- 1e2
n <- c(10, 100, 1000, 10000, 100000)
p <- numeric(length = length(n))
sdP <- numeric(length = length(n))
for(i in 1:length(n))
{
score <- numeric(length = n[i])
for(j in 1:n[i])
{
y <- rnorm(N, mu0, 1)
test <- t.test(y, mu = mu0)
conf <- test$conf.int
if((mu0 <= conf[2]) && (mu0 >= conf[1]))
score[j] <- score[j] + 1
}
p[i] <- mean(score)
sdP[i] <- sd(score)
}
print(p)
print(sd)
print(sdP)
set.seed(1)
est_prob <- function(theta, n, alpha){
y <- rnorm(n, mean = theta, sd = 1)
upper_ci <- mean(y) + (1/sqrt(n))*qnorm(1-alpha/2)
lower_ci <- mean(y) - (1/sqrt(n))*qnorm(1-alpha/2)
y101 <- rnorm(1, mean = theta, sd = 1)
coverage <- ifelse(y101 > lower_ci & y101 < upper_ci, 1, 0)
return(coverage)
}
iter_seq <- c(1e1, 1e2, 1e3, 1e4, 1e5) ### sequence of replications
iter_num <- max(iter_seq) ### number of maximum replications
store_cov <- vector(length = length(iter_num))
for (i in 1:iter_num) {
store_cov[i] <- est_prob(10, 100, 0.05)
}
p_est <- vector(length = length(iter_seq))
p_sd <- vector(length = length(iter_seq))
for (i in 1:length(iter_seq)) {
s <- iter_seq[i]
p_est[i] <- mean(store_cov[1:s])
p_sd[i] <- sd(store_cov[1:s])/sqrt(s)
}
p_est   # estimate of p for different replications
p_sd
set.seed(1)
mu0 <- 10
N <- 1e2
n <- c(10, 100, 1000, 10000, 100000)
p <- numeric(length = length(n))
sdP <- numeric(length = length(n))
for(i in 1:length(n))
{
score <- numeric(length = n[i])
for(j in 1:n[i])
{
y <- rnorm(N, mu0, 1)
test <- t.test(y, mu = mu0)
conf <- test$conf.int
if((mu0 <= conf[2]) && (mu0 >= conf[1]))
score[j] <- score[j] + 1
}
p[i] <- mean(score)
sdP[i] <- sd(score)
}
print(p)
print(sdP)
sdP == psd
sdP == Psd
sdP == p_sd
#2
set.seed(1)
mu0 <- 10
N <- 1e2
y <- rnorm(N, mu0, 1)
test <- t.test(y, mu = mu0)
conf <- test$conf.int
n <- c(10, 100, 1000, 10000, 100000)
p <- numeric(length = length(n))
sdP <- numeric(length = length(n))
for(i in 1:length(n))
{
score <- numeric(length = n[i])
for(j in 1:n[i])
{
samp <- rnorm(1, mu0, 1)
if((samp <= conf[2]) && (samp >= conf[1]))
score[j] <- score[j] + 1
}
p[i] <- mean(score)
sdP[i] <- sd(score)
}
print(p)
print(sdP)
#2
set.seed(1)
mu0 <- 10
N <- 1e2
y <- rnorm(N, mu0, 1)
test <- t.test(y, mu = mu0)
conf <- test$conf.int
n <- c(10, 100, 1000, 10000, 100000)
p <- numeric(length = length(n))
sdP <- numeric(length = length(n))
for(i in 1:length(n))
{
score <- numeric(length = n[i])
for(j in 1:n[i])
{
samp <- rnorm(1, mu0, 1)
if((samp <= conf[2]) && (samp >= conf[1]))
score[j] <- score[j] + 1
}
p[i] <- mean(score)
sdP[i] <- sd(score)
}
print(p)
print(sdP)
#2
set.seed(1)
mu0 <- 10
N <- 1e2
y <- rnorm(N, mu0, 1)
test <- t.test(y, mu = mu0)
conf <- test$conf.int
n <- c(10, 100, 1000, 10000, 100000)
p <- numeric(length = length(n))
sdP <- numeric(length = length(n))
for(i in 1:length(n))
{
score <- numeric(length = n[i])
for(j in 1:n[i])
{
samp <- rnorm(1, mu0, 1)
if((samp <= conf[2]) && (samp >= conf[1]))
score[j] <- score[j] + 1
}
p[i] <- mean(score)
sdP[i] <- sd(score)
}
print(p)
print(sdP)
data_quiz <- read.csv("https://www.dropbox.com/s/geke5ykega8lytr/Q3_data.csv?dl=1", header = TRUE)
### Part (1) Fitting and checking significance
lr.fit <- glm(Y ~ X1 + X2 + X3 + X4, data = data_quiz, family = binomial)
summary(lr.fit)
print("X2")
### Part (2) Prediction of probabilities
fit.prob <- predict(lr.fit, type = "response")
fit.pred <- rep(0, nrow(data_quiz))
fit.pred[fit.prob > 0.5] <- 1
mean(fit.pred == data_quiz$Y)
n <- 1e2
samp <- rnorm(n, 5, 1)
ans <- mean(samp)
sum <- 0
iter <- 0
max <- 1e3
prev <- 0
t <- 0.1
meanVec <- numeric(length = max)
while(iter < max)
{
iter <- iter + 1
i <- sample(1:n, 1)
curr <- prev + t*(samp[i] - prev)
sum <- sum + curr
meanVec[iter] <- sum/iter
prev <- curr
}
plot(seq(1, max, length = max), meanVec, ylim = c(4.5, 5.5), type = "l")
ans
meanVec[iter]
dat <- read.csv("https://www.dropbox.com/s/geke5ykega8lytr/Q3_data.csv?dl=1")
dat <- read.csv("https://www.dropbox.com/s/geke5ykega8lytr/Q3_data.csv?dl=1")
View(dat)
y <- dat[ ,1]
X <- dat[ ,-1]
X <- as.matrix(dat[ ,-1])
fit <- glm(Y~X1+X2+X3+X4, method = "binomial", data = X)
dat <- read.csv("https://www.dropbox.com/s/geke5ykega8lytr/Q3_data.csv?dl=1")
y <- dat[ ,1]
X <- dat[ ,-1]
fit <- glm(Y~X1+X2+X3+X4, method = "binomial", data = X)
fit <- glm(y~X1+X2+X3+X4, method = "binomial", data = X)
fit <- glm(y~X1+X2+X3+X4, family = "binomial", data = X)
summary(fit)
pro <- predict(fit,type = "response")
?predict
yHat <- pro > 0.5
mean(y == yHat)
n <- 50
x <- numeric(length = n)
#1
set.seed(1)
n <- 50
x <- numeric(length = n)
for(i in 1:n)
{
u <- runif(1)
if(u <= 0.333)
x[i] <- rnorm(1, 0, 2)
else
x[i] <- rnorm(1, 0, 4)
}
y <- 7.5 + x*0.68 + rnorm(n, 0, 1)
fit <- lm(y~x)
summary(fit)
plot(x, y, xlab = "covariate", ylab = "response")
plot(x, y, xlab = "covariate", ylab = "response", pch = 16)
conf <- fit$coefficients
l <- seq(-10, 10, length = 50)
plot(x, y, xlab = "covariate", ylab = "response", pch = 16)
l <- seq(-10, 10, length = 50)
m <- coff[1] + coff[2]*l
coff <- fit$coefficients
coff <- fit$coefficients
plot(x, y, xlab = "covariate", ylab = "response", pch = 16)
l <- seq(-10, 10, length = 50)
m <- coff[1] + coff[2]*l
lines(l, m, col = "red")
#1
set.seed(1)
n <- 50
x <- numeric(length = n)
for(i in 1:n)
{
u <- runif(1)
if(u <= 0.333)
x[i] <- rnorm(1, 0, 2)
else
x[i] <- rnorm(1, 0, 4)
}
y <- 7.5 + x*0.68 + rnorm(n, 0, 1)
fit <- lm(y~x)
summary(fit)
coff <- fit$coefficients
plot(x, y, xlab = "covariate", ylab = "response", pch = 16)
l <- seq(-10, 10, length = 50)
m <- 7.5 + 0.68*l
lines(l, m, col = "blue")
m <- coff[1] + coff[2]*l
lines(l, m, col = "red")
#1
set.seed(1)
n <- 50
x <- numeric(length = n)
for(i in 1:n)
{
u <- runif(1)
if(u <= 0.333)
x[i] <- rnorm(1, 0, 2)
else
x[i] <- rnorm(1, 0, 4)
}
y <- 7.5 + x*0.68 + rnorm(n, 0, 1)
fit <- lm(y~x)
#summary(fit)
coff <- fit$coefficients
plot(x, y, xlab = "covariate", ylab = "response", pch = 16)
l <- seq(-10, 10, length = 50)
m <- 7.5 + 0.68*l
lines(l, m, col = "blue")
m <- coff[1] + coff[2]*l
lines(l, m, col = "red")
n <- c(100, 200, 500, 1000, 5000)
ratioBeta0 <- numeric(length = length(n))
ratioBeta1 <- numeric(length = length(n))
for(i in 1:length(n))
{
x <- numeric(length = n)
for(i in 1:n)
{
u <- runif(1)
if(u <= 0.333)
x[i] <- rnorm(1, 0, 2)
else
x[i] <- rnorm(1, 0, 4)
}
y <- 7.5 + x*0.68 + rnorm(n, 0, 1)
fit <- lm(y~x)
coff <- fit$coefficients
ratioBeta0[i] <- 7.5/coff[1]
ratioBeta1[i] <- 0.68/coff[2]
}
#1
set.seed(1)
n <- 50
x <- numeric(length = n)
for(i in 1:n)
{
u <- runif(1)
if(u <= 0.333)
x[i] <- rnorm(1, 0, 2)
else
x[i] <- rnorm(1, 0, 4)
}
y <- 7.5 + x*0.68 + rnorm(n, 0, 1)
fit <- lm(y~x)
#summary(fit)
coff <- fit$coefficients
plot(x, y, xlab = "covariate", ylab = "response", pch = 16)
l <- seq(-10, 10, length = 50)
m <- 7.5 + 0.68*l
lines(l, m, col = "blue")
m <- coff[1] + coff[2]*l
lines(l, m, col = "red")
n <- c(100, 200, 500, 1000, 5000)
ratioBeta0 <- numeric(length = length(n))
ratioBeta1 <- numeric(length = length(n))
for(i in 1:length(n))
{
x <- numeric(length = n[i])
for(j in 1:n)
{
u <- runif(1)
if(u <= 0.333)
x[j] <- rnorm(1, 0, 2)
else
x[j] <- rnorm(1, 0, 4)
}
y <- 7.5 + x*0.68 + rnorm(n, 0, 1)
fit <- lm(y~x)
coff <- fit$coefficients
ratioBeta0[i] <- 7.5/coff[1]
ratioBeta1[i] <- 0.68/coff[2]
}
par(mfrow = c(1, 2))
plot(log(n), ratioBeta0)
plot(log(n), ratioBeta1)
#1
set.seed(1)
n <- 50
x <- numeric(length = n)
for(i in 1:n)
{
u <- runif(1)
if(u <= 0.333)
x[i] <- rnorm(1, 0, 2)
else
x[i] <- rnorm(1, 0, 4)
}
y <- 7.5 + x*0.68 + rnorm(n, 0, 1)
fit <- lm(y~x)
#summary(fit)
coff <- fit$coefficients
plot(x, y, xlab = "covariate", ylab = "response", pch = 16)
l <- seq(-10, 10, length = 50)
m <- 7.5 + 0.68*l
lines(l, m, col = "blue")
m <- coff[1] + coff[2]*l
lines(l, m, col = "red")
n <- c(100, 200, 500, 1000, 5000)
ratioBeta0 <- numeric(length = length(n))
ratioBeta1 <- numeric(length = length(n))
for(i in 1:length(n))
{
x <- numeric(length = n[i])
for(j in 1:n[i])
{
u <- runif(1)
if(u <= 0.333)
x[j] <- rnorm(1, 0, 2)
else
x[j] <- rnorm(1, 0, 4)
}
y <- 7.5 + x*0.68 + rnorm(n, 0, 1)
fit <- lm(y~x)
coff <- fit$coefficients
ratioBeta0[i] <- 7.5/coff[1]
ratioBeta1[i] <- 0.68/coff[2]
}
par(mfrow = c(1, 2))
plot(log(n), ratioBeta0)
plot(log(n), ratioBeta1)
